version: '3.8'

services:
  # Example GoFiber Application
  gofiber-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gofiber-example-app
    ports:
      - "8080:8080"   # Main application port
      - "9091:9091"   # Metrics port
    environment:
      # Application configuration
      APP_NAME: gofiber-example-app
      APP_VERSION: "1.0.0"
      ENVIRONMENT: development
      APP_PORT: "8080"
      METRICS_PORT: "9091"
      LOG_LEVEL: info
      
      # Tracing configuration
      TRACING_ENABLED: "true"
      OTEL_EXPORTER_OTLP_ENDPOINT: jaeger:4317
      OTEL_SERVICE_NAME: gofiber-example-app
      
      # Feature flags
      DB_ENABLED: "true"
      CACHE_ENABLED: "true"
    depends_on:
      - jaeger
      - prometheus
      - grafana
      - loki
    networks:
      - apm-network
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.53
    container_name: jaeger
    ports:
      - "5775:5775/udp"   # Agent accept zipkin.thrift over compact thrift protocol
      - "6831:6831/udp"   # Agent accept jaeger.thrift over compact thrift protocol
      - "6832:6832/udp"   # Agent accept jaeger.thrift over binary thrift protocol
      - "5778:5778"       # Agent serve configs
      - "16686:16686"     # Jaeger UI
      - "14268:14268"     # Accept jaeger.thrift directly from clients
      - "14250:14250"     # Accept model.proto
      - "9411:9411"       # Zipkin compatible endpoint
      - "4317:4317"       # OTLP gRPC
      - "4318:4318"       # OTLP HTTP
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
      COLLECTOR_OTLP_ENABLED: "true"
      SPAN_STORAGE_TYPE: memory
      # For production, use these settings:
      # SPAN_STORAGE_TYPE: elasticsearch
      # ES_SERVER_URLS: http://elasticsearch:9200
    networks:
      - apm-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - apm-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_USERS_ALLOW_ORG_CREATE: false
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
    volumes:
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
      - loki
      - jaeger
    networks:
      - apm-network
    restart: unless-stopped

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - apm-network
    restart: unless-stopped

  # Promtail for log collection
  promtail:
    image: grafana/promtail:2.9.3
    container_name: promtail
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail-config.yaml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - apm-network
    restart: unless-stopped

  # Alertmanager for alert management
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - apm-network
    restart: unless-stopped

  # Node Exporter for host metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: node-exporter
    ports:
      - "9100:9100"
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - apm-network
    restart: unless-stopped

  # Cadvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - apm-network
    restart: unless-stopped

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  alertmanager-data:
    driver: local

networks:
  apm-network:
    driver: bridge