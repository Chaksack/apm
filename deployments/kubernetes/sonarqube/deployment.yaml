# SonarQube Server Deployment with PostgreSQL
# This deployment includes SonarQube server, PostgreSQL database, and persistent volumes
apiVersion: v1
kind: Namespace
metadata:
  name: sonarqube
  labels:
    name: sonarqube
---
# PostgreSQL Secret
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: sonarqube
type: Opaque
data:
  postgres-password: c29uYXJxdWJl  # base64 encoded "sonarqube"
  postgres-user: c29uYXJxdWJl      # base64 encoded "sonarqube"
---
# SonarQube Secret
apiVersion: v1
kind: Secret
metadata:
  name: sonarqube-secret
  namespace: sonarqube
type: Opaque
data:
  sonar-password: YWRtaW4=  # base64 encoded "admin"
  sonar-user: YWRtaW4=      # base64 encoded "admin"
---
# PostgreSQL PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: sonarqube
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard
---
# SonarQube PersistentVolumeClaim for data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarqube-data-pvc
  namespace: sonarqube
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
# SonarQube PersistentVolumeClaim for logs
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarqube-logs-pvc
  namespace: sonarqube
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
# SonarQube PersistentVolumeClaim for extensions
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarqube-extensions-pvc
  namespace: sonarqube
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: sonarqube
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:14-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: sonarqube
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - sonarqube
            - -d
            - sonarqube
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - sonarqube
            - -d
            - sonarqube
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: sonarqube
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP
---
# SonarQube ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: sonarqube-config
  namespace: sonarqube
data:
  sonar.properties: |
    # Database configuration
    sonar.jdbc.url=jdbc:postgresql://postgres:5432/sonarqube
    sonar.jdbc.username=sonarqube
    
    # Web server configuration
    sonar.web.host=0.0.0.0
    sonar.web.port=9000
    sonar.web.context=/
    
    # Elasticsearch configuration
    sonar.search.javaOpts=-Xmx2g -Xms2g
    sonar.search.host=localhost
    sonar.search.port=9001
    
    # Logging configuration
    sonar.log.level=INFO
    sonar.log.jsonOutput=false
    
    # Security configuration
    sonar.security.realm=
    sonar.authenticator.downcase=true
    
    # Go plugin specific configuration
    sonar.go.file.suffixes=.go
    sonar.go.exclusions=**/*_test.go,**/vendor/**
    
    # Performance tuning
    sonar.ce.javaOpts=-Xmx2g -Xms1g
    sonar.web.javaOpts=-Xmx2g -Xms1g
    
    # Plugin configuration
    sonar.plugins.risk.consent=ACCEPTED
    sonar.telemetry.enable=false
---
# SonarQube Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarqube
  namespace: sonarqube
  labels:
    app: sonarqube
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarqube
  template:
    metadata:
      labels:
        app: sonarqube
    spec:
      initContainers:
      - name: init-sysctl
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          sysctl -w vm.max_map_count=524288
          sysctl -w fs.file-max=131072
          ulimit -n 131072
          ulimit -u 8192
        securityContext:
          privileged: true
      containers:
      - name: sonarqube
        image: sonarqube:10.3-community
        ports:
        - containerPort: 9000
        env:
        - name: SONAR_JDBC_URL
          value: "jdbc:postgresql://postgres:5432/sonarqube"
        - name: SONAR_JDBC_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-user
        - name: SONAR_JDBC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: SONAR_WEB_JAVAOPTS
          value: "-Xmx2g -Xms1g"
        - name: SONAR_CE_JAVAOPTS
          value: "-Xmx2g -Xms1g"
        - name: SONAR_SEARCH_JAVAOPTS
          value: "-Xmx2g -Xms2g"
        volumeMounts:
        - name: sonarqube-data
          mountPath: /opt/sonarqube/data
        - name: sonarqube-logs
          mountPath: /opt/sonarqube/logs
        - name: sonarqube-extensions
          mountPath: /opt/sonarqube/extensions
        - name: sonarqube-config
          mountPath: /opt/sonarqube/conf
          readOnly: true
        resources:
          requests:
            memory: "3Gi"
            cpu: "1000m"
          limits:
            memory: "6Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /api/system/status
            port: 9000
          initialDelaySeconds: 180
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/system/status
            port: 9000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
      volumes:
      - name: sonarqube-data
        persistentVolumeClaim:
          claimName: sonarqube-data-pvc
      - name: sonarqube-logs
        persistentVolumeClaim:
          claimName: sonarqube-logs-pvc
      - name: sonarqube-extensions
        persistentVolumeClaim:
          claimName: sonarqube-extensions-pvc
      - name: sonarqube-config
        configMap:
          name: sonarqube-config
---
# SonarQube Service
apiVersion: v1
kind: Service
metadata:
  name: sonarqube
  namespace: sonarqube
  labels:
    app: sonarqube
spec:
  selector:
    app: sonarqube
  ports:
    - name: http
      port: 9000
      targetPort: 9000
  type: ClusterIP
---
# SonarQube Ingress (optional)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sonarqube-ingress
  namespace: sonarqube
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
spec:
  ingressClassName: nginx
  rules:
  - host: sonarqube.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sonarqube
            port:
              number: 9000
---
# NetworkPolicy for SonarQube (optional security)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: sonarqube-network-policy
  namespace: sonarqube
spec:
  podSelector:
    matchLabels:
      app: sonarqube
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: default
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 9000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
---
# ServiceMonitor for Prometheus monitoring (optional)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: sonarqube-metrics
  namespace: sonarqube
  labels:
    app: sonarqube
spec:
  selector:
    matchLabels:
      app: sonarqube
  endpoints:
  - port: http
    path: /api/monitoring/metrics
    interval: 30s
    scrapeTimeout: 10s