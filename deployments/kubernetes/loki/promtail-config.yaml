apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: default
data:
  promtail.yaml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0
      log_level: info
    
    positions:
      filename: /tmp/positions.yaml
    
    clients:
      - url: http://loki:3100/loki/api/v1/push
        tenant_id: default
        batchwait: 1s
        batchsize: 1048576
        timeout: 10s
        backoff_config:
          min_period: 500ms
          max_period: 5m
          max_retries: 10
        external_labels:
          cluster: kubernetes
          job: promtail
    
    scrape_configs:
    - job_name: kubernetes-pods
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: __host__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        replacement: $1
        separator: /
        source_labels:
        - __meta_kubernetes_namespace
        - __meta_kubernetes_pod_name
        target_label: job
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - replacement: /var/log/pods/*$1/*.log
        separator: /
        source_labels:
        - __meta_kubernetes_pod_uid
        - __meta_kubernetes_pod_container_name
        target_label: __path__
      
      pipeline_stages:
      # Multiline handling for GoFiber stack traces
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}'
          max_wait_time: 3s
          max_lines: 500
      
      # Parse JSON logs from GoFiber
      - json:
          expressions:
            timestamp: time
            level: level
            message: msg
            method: method
            path: path
            status: status
            latency: latency
            ip: ip
            error: error
            request_id: request_id
            user_agent: user_agent
          drop_malformed: false
      
      # Parse non-JSON structured logs
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[.]\d{3}Z?)\s+(?P<level>\w+)\s+(?P<message>.*)'
      
      # Extract additional labels from log content
      - regex:
          expression: 'method=(?P<method>\w+)'
      - regex:
          expression: 'path=(?P<path>[^\s]+)'
      - regex:
          expression: 'status=(?P<status>\d+)'
      - regex:
          expression: 'latency=(?P<latency>[\d.]+\w+)'
      - regex:
          expression: 'error="(?P<error>[^"]+)"'
      
      # Set timestamp
      - timestamp:
          source: timestamp
          format: RFC3339
          fallback_formats:
            - "2006-01-02T15:04:05.000Z"
            - "2006-01-02T15:04:05Z"
            - "2006-01-02 15:04:05"
      
      # Add labels
      - labels:
          level:
          method:
          path:
          status:
      
      # Convert latency to milliseconds for metrics
      - metrics:
          http_request_duration_milliseconds:
            type: Histogram
            description: "HTTP request latency"
            source: latency
            config:
              match_all: true
              action: add
              buckets: [0.1, 0.3, 1.2, 5.0]
      
      # Drop debug logs in production (uncomment if needed)
      # - drop:
      #     source: level
      #     value: debug
      
      # Drop health check endpoints
      - drop:
          expression: 'path="/health"'
      - drop:
          expression: 'path="/metrics"'
      - drop:
          expression: 'path="/ready"'
      
      # Filter out specific error patterns (customize as needed)
      - match:
          selector: '{level="error"}'
          stages:
          - regex:
              expression: 'context canceled|connection reset by peer'
          - drop:
              longer_than: 0
      
      # Pack all extracted fields into the log line
      - pack:
          labels:
            - level
            - method
            - path
            - status
      
      # Output the final log
      - output:
          source: message
    
    # Static labels for all logs
    - job_name: static-logs
      static_configs:
      - targets:
          - localhost
        labels:
          job: gofiber-app
          __path__: /var/log/gofiber/*.log
      pipeline_stages:
      - json:
          expressions:
            timestamp: time
            level: level
            message: msg
            method: method
            path: path
            status: status
            latency: latency
      - timestamp:
          source: timestamp
          format: RFC3339
      - labels:
          level:
          method:
          status:
      - output:
          source: message