version: '3.8'

services:
  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: apm-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    environment:
      - TZ=UTC
    networks:
      - apm-network
    restart: unless-stopped

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:10.2.2
    container_name: apm-grafana
    ports:
      - "3000:3000"
    volumes:
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_SMTP_ENABLED=false
      - TZ=UTC
    networks:
      - apm-network
    depends_on:
      - prometheus
      - loki
      - jaeger
    restart: unless-stopped

  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.9.3
    container_name: apm-loki
    ports:
      - "3100:3100"
    volumes:
      - ./configs/loki/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    environment:
      - TZ=UTC
    networks:
      - apm-network
    restart: unless-stopped

  # Promtail - Log collector
  promtail:
    image: grafana/promtail:2.9.3
    container_name: apm-promtail
    volumes:
      - ./configs/promtail/promtail-config.yaml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - apm-network
    depends_on:
      - loki
    restart: unless-stopped

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: apm-jaeger
    ports:
      - "5775:5775/udp"   # accept zipkin.thrift over compact thrift protocol
      - "6831:6831/udp"   # accept jaeger.thrift over compact thrift protocol
      - "6832:6832/udp"   # accept jaeger.thrift over binary thrift protocol
      - "5778:5778"       # serve configs
      - "16686:16686"     # serve frontend
      - "14250:14250"     # accept model.proto
      - "14268:14268"     # accept jaeger.thrift directly from clients
      - "14269:14269"     # admin port: health check at / and metrics at /metrics
      - "9411:9411"       # Zipkin compatible endpoint
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
      - TZ=UTC
    volumes:
      - jaeger_data:/badger
    networks:
      - apm-network
    restart: unless-stopped

  # AlertManager - Alert routing and notifications
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: apm-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./configs/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--cluster.advertise-address=0.0.0.0:9093'
    environment:
      - TZ=UTC
    networks:
      - apm-network
    restart: unless-stopped

  # Sample GoFiber application with observability
  sample-app:
    build:
      context: ./sample-app
      dockerfile: Dockerfile
    container_name: apm-sample-app
    ports:
      - "8080:8080"        # Main application port
      - "9091:9091"        # Prometheus metrics port
    environment:
      - APP_NAME=sample-gofiber-app
      - APP_PORT=8080
      - METRICS_PORT=9091
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      # OpenTelemetry configuration
      - OTEL_SERVICE_NAME=sample-gofiber-app
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=prometheus
      # Jaeger configuration (for backward compatibility)
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      - JAEGER_SERVICE_NAME=sample-gofiber-app
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
      # Structured logging
      - LOG_OUTPUT=stdout
      - TZ=UTC
    volumes:
      - ./sample-app:/app
    networks:
      - apm-network
    depends_on:
      - prometheus
      - jaeger
      - loki
      - promtail
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9091"
      - "prometheus.io/path=/metrics"
    restart: unless-stopped

  # Node Exporter for host metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: apm-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - apm-network
    restart: unless-stopped

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: apm-cadvisor
    ports:
      - "8090:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - apm-network
    restart: unless-stopped

networks:
  apm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  jaeger_data:
    driver: local
  alertmanager_data:
    driver: local