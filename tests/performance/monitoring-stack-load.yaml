apiVersion: v1
kind: Namespace
metadata:
  name: performance-testing
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: load-test-config
  namespace: performance-testing
data:
  prometheus-config.yaml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    rule_files:
      - "rules/*.yml"
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      - job_name: 'node-exporter'
        static_configs:
          - targets: ['node-exporter:9100']
      - job_name: 'load-test-app'
        static_configs:
          - targets: ['load-test-app:8080']
        scrape_interval: 5s
      - job_name: 'grafana'
        static_configs:
          - targets: ['grafana:3000']
  
  grafana-datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus:9090
        access: proxy
        isDefault: true
      - name: Loki
        type: loki
        url: http://loki:3100
        access: proxy
  
  loki-config.yaml: |
    auth_enabled: false
    server:
      http_listen_port: 3100
    ingester:
      lifecycler:
        address: 127.0.0.1
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
    storage_config:
      boltdb_shipper:
        active_index_directory: /tmp/loki/boltdb-shipper-active
        cache_location: /tmp/loki/boltdb-shipper-cache
        shared_store: filesystem
      filesystem:
        directory: /tmp/loki/chunks
    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
    chunk_store_config:
      max_look_back_period: 0s
    table_manager:
      retention_deletes_enabled: false
      retention_period: 0s
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-load-test
  namespace: performance-testing
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-load-test
  template:
    metadata:
      labels:
        app: prometheus-load-test
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: storage
          mountPath: /prometheus
        args:
          - '--config.file=/etc/prometheus/prometheus-config.yaml'
          - '--storage.tsdb.path=/prometheus'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=15d'
          - '--web.enable-lifecycle'
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
      volumes:
      - name: config
        configMap:
          name: load-test-config
      - name: storage
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-load-test
  namespace: performance-testing
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana-load-test
  template:
    metadata:
      labels:
        app: grafana-load-test
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        volumeMounts:
        - name: datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: datasources
        configMap:
          name: load-test-config
      - name: storage
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-load-test
  namespace: performance-testing
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki-load-test
  template:
    metadata:
      labels:
        app: loki-load-test
    spec:
      containers:
      - name: loki
        image: grafana/loki:latest
        ports:
        - containerPort: 3100
        volumeMounts:
        - name: config
          mountPath: /etc/loki
        - name: storage
          mountPath: /tmp/loki
        args:
          - '-config.file=/etc/loki/loki-config.yaml'
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: config
        configMap:
          name: load-test-config
      - name: storage
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-test-app
  namespace: performance-testing
spec:
  replicas: 3
  selector:
    matchLabels:
      app: load-test-app
  template:
    metadata:
      labels:
        app: load-test-app
    spec:
      containers:
      - name: load-test-app
        image: prom/node-exporter:latest
        ports:
        - containerPort: 9100
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: log-generator
  namespace: performance-testing
spec:
  replicas: 2
  selector:
    matchLabels:
      app: log-generator
  template:
    metadata:
      labels:
        app: log-generator
    spec:
      containers:
      - name: log-generator
        image: mingrammer/flog:latest
        args:
          - "--loop"
          - "--format=json"
          - "--number=100"
          - "--delay=1s"
          - "--output=/var/log/generated.log"
        volumeMounts:
        - name: logs
          mountPath: /var/log
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      - name: promtail
        image: grafana/promtail:latest
        args:
          - '-config.file=/etc/promtail/config.yml'
        volumeMounts:
        - name: logs
          mountPath: /var/log
        - name: promtail-config
          mountPath: /etc/promtail
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: logs
        emptyDir: {}
      - name: promtail-config
        configMap:
          name: promtail-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: performance-testing
data:
  config.yml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0
    positions:
      filename: /tmp/positions.yaml
    clients:
      - url: http://loki:3100/loki/api/v1/push
    scrape_configs:
      - job_name: system
        static_configs:
          - targets:
              - localhost
            labels:
              job: varlogs
              __path__: /var/log/*.log
---
apiVersion: batch/v1
kind: Job
metadata:
  name: monitoring-stack-load-test
  namespace: performance-testing
spec:
  template:
    spec:
      containers:
      - name: load-test-runner
        image: loadimpact/k6:latest
        command:
        - /bin/sh
        - -c
        - |
          cat > /tmp/load-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          import { Rate } from 'k6/metrics';
          
          export let errorRate = new Rate('errors');
          
          export let options = {
            stages: [
              { duration: '2m', target: 10 },
              { duration: '5m', target: 20 },
              { duration: '2m', target: 50 },
              { duration: '5m', target: 100 },
              { duration: '2m', target: 0 },
            ],
            thresholds: {
              http_req_duration: ['p(95)<500'],
              errors: ['rate<0.1'],
            },
          };
          
          const PROMETHEUS_URL = 'http://prometheus:9090';
          const GRAFANA_URL = 'http://grafana:3000';
          const LOKI_URL = 'http://loki:3100';
          
          export default function() {
            let responses = [];
            
            // Test Prometheus queries
            let promQueries = [
              'up',
              'rate(prometheus_http_requests_total[5m])',
              'sum(rate(prometheus_http_requests_total[5m])) by (handler)',
              'histogram_quantile(0.95, rate(prometheus_http_request_duration_seconds_bucket[5m]))',
            ];
            
            for (let query of promQueries) {
              let res = http.get(`${PROMETHEUS_URL}/api/v1/query?query=${encodeURIComponent(query)}`);
              responses.push(res);
              check(res, {
                'prometheus query status is 200': (r) => r.status === 200,
                'prometheus query has data': (r) => JSON.parse(r.body).data.result.length > 0,
              });
            }
            
            // Test Grafana API
            let grafanaRes = http.get(`${GRAFANA_URL}/api/health`);
            responses.push(grafanaRes);
            check(grafanaRes, {
              'grafana health status is 200': (r) => r.status === 200,
            });
            
            // Test Loki queries
            let lokiQueries = [
              '{job="varlogs"}',
              'rate({job="varlogs"}[5m])',
              'sum(rate({job="varlogs"}[5m])) by (level)',
            ];
            
            for (let query of lokiQueries) {
              let endTime = Date.now() * 1000000;
              let startTime = endTime - (3600 * 1000000000);
              let res = http.get(`${LOKI_URL}/loki/api/v1/query_range?query=${encodeURIComponent(query)}&start=${startTime}&end=${endTime}`);
              responses.push(res);
              check(res, {
                'loki query status is 200': (r) => r.status === 200,
              });
            }
            
            // Calculate error rate
            let errors = responses.filter(r => r.status !== 200).length;
            errorRate.add(errors > 0);
            
            sleep(1);
          }
          EOF
          
          k6 run /tmp/load-test.js
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      restartPolicy: Never
  backoffLimit: 1
---
apiVersion: batch/v1
kind: Job
metadata:
  name: resource-monitor
  namespace: performance-testing
spec:
  template:
    spec:
      containers:
      - name: resource-monitor
        image: prom/prometheus:latest
        command:
        - /bin/sh
        - -c
        - |
          cat > /tmp/monitor.sh << 'EOF'
          #!/bin/bash
          
          echo "Starting resource monitoring..."
          PROMETHEUS_URL="http://prometheus:9090"
          GRAFANA_URL="http://grafana:3000"
          LOKI_URL="http://loki:3100"
          
          # Wait for services to be ready
          until curl -s ${PROMETHEUS_URL}/api/v1/status/config > /dev/null; do
            echo "Waiting for Prometheus..."
            sleep 5
          done
          
          until curl -s ${GRAFANA_URL}/api/health > /dev/null; do
            echo "Waiting for Grafana..."
            sleep 5
          done
          
          until curl -s ${LOKI_URL}/ready > /dev/null; do
            echo "Waiting for Loki..."
            sleep 5
          done
          
          echo "All services ready. Starting monitoring..."
          
          # Monitor for 30 minutes
          for i in {1..360}; do
            echo "=== Monitoring iteration $i ==="
            
            # Prometheus metrics
            echo "Prometheus:"
            curl -s "${PROMETHEUS_URL}/api/v1/query?query=prometheus_build_info" | jq -r '.data.result[0].metric.version // "unknown"'
            curl -s "${PROMETHEUS_URL}/api/v1/query?query=prometheus_tsdb_symbol_table_size_bytes" | jq -r '.data.result[0].value[1] // "0"'
            curl -s "${PROMETHEUS_URL}/api/v1/query?query=rate(prometheus_http_requests_total[5m])" | jq -r '.data.result | length'
            
            # Grafana metrics
            echo "Grafana:"
            curl -s "${GRAFANA_URL}/api/health" | jq -r '.database // "unknown"'
            
            # Loki metrics
            echo "Loki:"
            curl -s "${LOKI_URL}/metrics" | grep -E "(loki_ingester_streams|loki_ingester_chunks)" | head -5
            
            # Resource usage
            echo "Resource usage:"
            kubectl top pods -n performance-testing --no-headers | while read line; do
              echo "  $line"
            done
            
            echo "---"
            sleep 5
          done
          
          echo "Monitoring complete."
          EOF
          
          chmod +x /tmp/monitor.sh
          /tmp/monitor.sh
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      restartPolicy: Never
  backoffLimit: 1
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: performance-testing
spec:
  selector:
    app: prometheus-load-test
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: performance-testing
spec:
  selector:
    app: grafana-load-test
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: performance-testing
spec:
  selector:
    app: loki-load-test
  ports:
  - port: 3100
    targetPort: 3100
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: load-test-app
  namespace: performance-testing
spec:
  selector:
    app: load-test-app
  ports:
  - port: 8080
    targetPort: 9100
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: node-exporter
  namespace: performance-testing
spec:
  selector:
    app: load-test-app
  ports:
  - port: 9100
    targetPort: 9100
  type: ClusterIP